name: ResCanvas Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost:27017 --username testuser --password testpass --authenticationDatabase admin --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Generate test keys
        run: |
          cd backend
          python3 gen_keys.py > /tmp/keys.txt
          export SIGNER_PUBLIC_KEY=$(grep "Public Key:" /tmp/keys.txt | awk '{print $3}')
          export SIGNER_PRIVATE_KEY=$(grep "Private Key:" /tmp/keys.txt | awk '{print $3}')
          printf "JWT_SECRET=test-secret-key-do-not-use-in-production\n" > .env
          printf "MONGO_ATLAS_URI=mongodb://testuser:testpass@localhost:27017/?authSource=admin\n" >> .env
          printf "SIGNER_PUBLIC_KEY=%s\n" "$SIGNER_PUBLIC_KEY" >> .env
          printf "SIGNER_PRIVATE_KEY=%s\n" "$SIGNER_PRIVATE_KEY" >> .env
          printf "RESILIENTDB_GRAPHQL_URI=https://cloud.resilientdb.com/graphql\n" >> .env
          printf "RES_DB_BASE_URI=https://crow.resilientdb.com\n" >> .env
      
      - name: Run unit tests
        env:
          JWT_SECRET: 'test-secret-key-do-not-use-in-production'
          RESILIENTDB_GRAPHQL_URI: 'https://cloud.resilientdb.com/graphql'
          RES_DB_BASE_URI: 'https://crow.resilientdb.com'
        run: |
          cd backend
          export SIGNER_PUBLIC_KEY=$(grep "SIGNER_PUBLIC_KEY=" .env | cut -d'=' -f2)
          export SIGNER_PRIVATE_KEY=$(grep "SIGNER_PRIVATE_KEY=" .env | cut -d'=' -f2)
          pytest tests/unit/ -n auto -m unit
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend-unit
          name: backend-unit-coverage
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-unit-coverage
          path: backend/htmlcov/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost:27017 --username testuser --password testpass --authenticationDatabase admin --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Generate test keys
        run: |
          cd backend
          python3 gen_keys.py > /tmp/keys.txt
          export SIGNER_PUBLIC_KEY=$(grep "Public Key:" /tmp/keys.txt | awk '{print $3}')
          export SIGNER_PRIVATE_KEY=$(grep "Private Key:" /tmp/keys.txt | awk '{print $3}')
          printf "JWT_SECRET=test-secret-key-do-not-use-in-production\n" > .env
          printf "MONGO_ATLAS_URI=mongodb://testuser:testpass@localhost:27017/?authSource=admin\n" >> .env
          printf "SIGNER_PUBLIC_KEY=%s\n" "$SIGNER_PUBLIC_KEY" >> .env
          printf "SIGNER_PRIVATE_KEY=%s\n" "$SIGNER_PRIVATE_KEY" >> .env
          printf "RESILIENTDB_GRAPHQL_URI=https://cloud.resilientdb.com/graphql\n" >> .env
          printf "RES_DB_BASE_URI=https://crow.resilientdb.com\n" >> .env
      
      - name: Run integration tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TESTING: '1'
          JWT_SECRET: 'test-secret-key-do-not-use-in-production'
          RESILIENTDB_GRAPHQL_URI: 'https://cloud.resilientdb.com/graphql'
          RES_DB_BASE_URI: 'https://crow.resilientdb.com'
        run: |
          cd backend
          export SIGNER_PUBLIC_KEY=$(grep "SIGNER_PUBLIC_KEY=" .env | cut -d'=' -f2)
          export SIGNER_PRIVATE_KEY=$(grep "SIGNER_PRIVATE_KEY=" .env | cut -d'=' -f2)
          pytest tests/integration/ -n auto -m integration
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend-integration
          name: backend-integration-coverage
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-integration-coverage
          path: backend/htmlcov/

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run unit tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --testPathIgnorePatterns='Canvas.test.js|Dashboard.test.js|App.test.js' --ci
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-coverage
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-coverage
          path: frontend/coverage/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost:27017 --username testuser --password testpass --authenticationDatabase admin --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Generate test keys and .env
        run: |
          cd backend
          python3 gen_keys.py > /tmp/keys.txt
          export SIGNER_PUBLIC_KEY=$(grep "Public Key:" /tmp/keys.txt | awk '{print $3}')
          export SIGNER_PRIVATE_KEY=$(grep "Private Key:" /tmp/keys.txt | awk '{print $3}')
          printf "JWT_SECRET=test-secret-key-do-not-use-in-production\n" > .env
          printf "MONGO_ATLAS_URI=mongodb://testuser:testpass@localhost:27017/?authSource=admin\n" >> .env
          printf "SIGNER_PUBLIC_KEY=%s\n" "$SIGNER_PUBLIC_KEY" >> .env
          printf "SIGNER_PRIVATE_KEY=%s\n" "$SIGNER_PRIVATE_KEY" >> .env
          printf "RESILIENTDB_GRAPHQL_URI=https://cloud.resilientdb.com/graphql\n" >> .env
          printf "RES_DB_BASE_URI=https://crow.resilientdb.com\n" >> .env
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium
      
      - name: Start backend server
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TESTING: '1'
        run: |
          cd backend
          python app.py &
          echo $! > backend.pid
          sleep 5
      
      - name: Build frontend
        env:
          CI: false
        run: |
          cd frontend
          npm run build
      
      - name: Start frontend server
        run: |
          cd frontend
          npm start &
          echo $! > frontend.pid
          sleep 10
      
      - name: Run E2E tests
        env:
          API_BASE: http://localhost:10010
          APP_BASE: http://localhost:3000
        run: |
          cd frontend
          npx playwright test tests/e2e/ tests/playwright_smoke.spec.js --reporter=list,html --max-failures=5 --retries=3
      
      - name: Stop servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f frontend/frontend.pid ]; then kill $(cat frontend/frontend.pid) || true; fi
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Python linters
        run: |
          pip install flake8 black
      
      - name: Run flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=incubator-*,__pycache__
      
      - name: Check black formatting
        continue-on-error: true
        run: |
          cd backend
          black --check . --exclude='incubator-*'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint || true

  coverage-report:
    name: Generate Coverage Report
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
      
      - name: Display coverage summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports have been uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          echo "View detailed reports in the artifacts" >> $GITHUB_STEP_SUMMARY
